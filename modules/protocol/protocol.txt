************************************************************************
** NeoStats - IRC Statistical Services                                **
** Copyright (c) 1999-2005 NeoStats Group. All Rights Reserved.       **
** This program and all associated documentation is free but          **
** copyrighted software; see the file COPYING for details.            **
** Homepage: http://www.neostats.net/                                 **
************************************************************************

How to add a new IRCd protocol to NeoStats
------------------------------------------

The easiest way to add a new IRCd protocol to NeoStats is to find one
that is close to the IRCd you wish to support and modify it for your
IRCd (e.g. if your IRCd is based on bahamut, start with the bahamut 
module). 

This document offers a number of guidance notes about the required 
areas of a protocol modules.

-----------------------------------<>-----------------------------------
Required includes

A protocol module must include the following files:

#include "neostats.h"
#include "protocol.h"

If you use a protocol specific header file, this should also be 
included.

-----------------------------------<>-----------------------------------
Messages and Tokens

IRC messages are formatted with the command embedded in the string in 
the form of a specific message or token. Many of these are specific to a
particular IRCd so must be provided by the module. You can usually find 
the messages in the IRCd source code in the file msg.h or similar.

An example is:
#define MSG_PRIVATE	"PRIVMSG"
#define TOK_PRIVATE	"!"

For NeoStats use you can cut and paste these defines into your protocol
source file but you should format them as:

const char MSG_PRIVATE[] = "PRIVMSG";
const char TOK_PRIVATE[] = "!";

This allows NeoStats to access the messages and tokens used when your
module loads and allows NeoStats to provide default handlers for many
common commands.

-----------------------------------<>-----------------------------------
Modes

NeoStats provides a set of defines for common user and channel modes 
supported by NeoStats. Those not supported must be provided by the 
module. You should create these for all modes not supported by NeoStats 
that are supported by your IRCd. The defines must follow a bit mask.

NeoStats reserves user mode bitmasks up to 0x01000000 and channel mode
bitmasks up to 0x00040000 so you must start custom masks at 0x02000000
and 0x00080000 respectively.

An example user mode is:
#define UMODE_FAILOP		0x00200000

An example channel mode is:
#define CMODE_NOCTCP		0x10000000

-----------------------------------<>-----------------------------------
ProtocolInfo definition

This is required to instruct NeoStats how to use certain elements of the
protocol module. An example follows:

ProtocolInfo protocol_info = 
{
	/* Required protocol options */
	PROTOCOL_SJOIN,
	/* Protocol options negotiated at link */
	PROTOCOL_TOKEN,
	/* Features supported */
	FEATURE_UMODECLOAK,
	/* Max host length */
	128,
	/* Max password length */
	32,
	/* Max nick length */
	30,
	/* Max user length */
	10,
	/* Max real name length */
	50,
	/* Max channel name length */
	32,
	/* Max topic length */
	307,
	/* Default operator modes for NeoStats service bots */
	"+oSq",
	/* Default channel mode for NeoStats service bots */
	"+o",
};

-----------------------------------<>-----------------------------------
Command list

This is parsed by NeoStats when we receive a message from an IRC server
in order to handle the message and is formatted as follows.

irc_cmd cmd_list[] = 
{
	/*Message	Token	Function	usage */
	{MSG_PRIVATE, TOK_PRIVATE, _m_private, 0},
	{0, 0, 0, 0},
};

NeoStats provides some basic handlers for IRCds which follow common
formats for commands and you can direct many of these messages to these
basic handlers. If your IRCd uses a different format, you must provide
your own function to parse the message and then pass to NeoStats. This
is discussed later in this file.

-----------------------------------<>-----------------------------------
Mode tables

The protocol module must provide a list of mode definitions for use by
NeoStats. There are four types of mode:

Channel modes - e.g. key
Channel user modes - e.g. voice
User modes - e.g. registered
User smodes - a secondary form of user mode used on some ircds. Only 
required if the IRCd supports it.

Mode tables are defined as follows:

mode_init chan_umodes[] = 
{
	{'v', CUMODE_VOICE, 0, '+'},
	{0, 0, 0},
};

mode_init chan_modes[] = 
{
	{'p', CMODE_PRIVATE, 0},
	{0, 0, 0},
};

mode_init user_umodes[] = 
{
	{'r', UMODE_REGNICK},
	{0, 0, 0},
};

mode_init user_smodes[] = 
{
	{'s', SMODE_SSL},
	{0, 0, 0},
};

NeoStats provides default mode tables for modes supported by all ircds
e.g. channel operators and user invisible mode so you need only list
the modes that are not in the default list.

-----------------------------------<>-----------------------------------
Command processing functions

These will be called when NeoStats receives a message listed in the 
cmd_list table. The module will then format parameters for NeoStats and 
call the appropriate function. 

We recommend that module functions use the naming convention of 
m_command. This closely follows similar functions in IRCd source code
making it easier to relate the module version to the IRCd original. 

The core function called will be named do_command so that it is simple
to find.

An example follows.

static void m_sethost( char *origin, char **argv, int argc, int srv )
{
	do_sethost( origin, argv[0] );
}

-----------------------------------<>-----------------------------------
Outgoing command functions

These will take a list of NeoStats parameters and format them for 
sending to the IRCd. 

These functions must be named send_command and are prototyped by 
NeoStats.

An example follows:

void send_part (const char *source, const char *chan)
{
	send_cmd (":%s %s %s", source, MSG_PART, chan);
}

If your IRCd supports tokens, we provide a helper macro to choose
the message or token when appropriate which is used as follows:

void send_part (const char *source, const char *chan)
{
	send_cmd (":%s %s %s", source, MSGTOK(PART), chan);
}

NeoStats provides some common handlers for basic functions that are
similar across all ircds. If your ircd uses a different format for a
command, you must provide this handler or NeoStats will try to use it's
internal handler which may cause problems on the network. 

-----------------------------------<>-----------------------------------

************************************************************************
** This document was last updated on April 17th, 2005 by M            **
************************************************************************
