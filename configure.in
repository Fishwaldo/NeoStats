#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.
AC_PREREQ(2.57)
AC_INIT()
AC_CONFIG_AUX_DIR(autotools)
AC_CONFIG_SRCDIR([src/main.c])
AC_CONFIG_HEADER([include/config.h])
AC_PREFIX_DEFAULT(~/NeoStats3.0)
AC_CACHE_LOAD

#Standard Defines for autoconf here
x_maj=3
x_min='0'
x_rev="genesis"
x_package='NeoStats'
MODULES="connectserv hostserv loveserv moraleserv statserv"
#dont edit anything after this line!

x_version=$x_maj.$x_min.$x_rev
AM_INIT_AUTOMAKE($x_package, $x_version)
AM_MAINTAINER_MODE
AC_DEFINE_UNQUOTED(MAJOR, $x_maj, "Major Version Number")
AC_DEFINE_UNQUOTED(MINOR, $x_min, "Minor Version Number")
AC_DEFINE_UNQUOTED(REV, $x_rev, "Revision Version Number")
AC_DEFINE_UNQUOTED(VERSION, $x_version, "Full Version")
AC_LIBTOOL_DLOPEN
dnl AC_DISABLE_SHARED
AC_LIBTOOL_WIN32_DLL
AC_LIBLTDL_CONVENIENCE

# Checks for programs.
AC_PROG_CC
AC_PROG_LIBTOOL
AC_PROG_YACC 
AC_PATH_PROG( SED, sed, , $PATH:/usr/bin:/usr/local/bin)

AC_SYS_LARGEFILE

# Checks for libraries.
AC_LIB_LTDL

# Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(
        sys/types.h \
        sys/time.h \
        sys/select.h \
        sys/socket.h \
        unistd.h \
        malloc.h \
        stdlib.h \
        arpa/inet.h \
        net/if.h \
        netinet/in.h \
        netdb.h \
        sys/sockio.h \
        sys/stat.h \
        sys/param.h \
        termios.h \
        termio.h \
        sgtty.h \
        fcntl.h \
        dlfcn.h \
        alloca.h \
        winsock.h \
        time.h \
        io.h \
        pwd.h \
        utime.h \
	limits.h \
        sys/utime.h \
        sys/poll.h \
        setjmp.h,
dnl to do if not found
[],
dnl to do if found
[],
dnl default includes
[
#ifdef HAVE_SYS_TYPES_H
#include <sys/types.h>
#endif
#ifdef HAVE_SYS_TIME_H
#include <sys/time.h>
#endif
#ifdef HAVE_SYS_SELECT_H
#include <sys/select.h>
#endif
#ifdef HAVE_SYS_SOCKET_H
#include <sys/socket.h>
#endif
]
)

# Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_C_INLINE
AC_TYPE_OFF_T
AC_TYPE_SIZE_T
AC_HEADER_TIME
AC_STRUCT_TM
AC_C_VOLATILE
AC_CHECK_SIZEOF(off_t)

AC_CHECK_TYPE(long long,
   [AC_DEFINE(HAVE_LONGLONG, 1, [if your compiler supports 'long long'])])

# check for ssize_t
AC_CHECK_TYPE(ssize_t, ,
   AC_DEFINE(ssize_t, int, [the signed version of size_t]))

TYPE_SOCKLEN_T
TYPE_IN_ADDR_T

AC_FUNC_SELECT_ARGTYPES
AC_CHECK_FUNCS( socket \
                select \
                strdup \
                strstr \
                strtok_r \
                strftime \
                uname \
                strcasecmp \
                stricmp \
                strcmpi \
                gethostbyaddr \
                gettimeofday \
                inet_addr \
                inet_ntoa \
                inet_pton \
                tcsetattr \
                tcgetattr \
                perror \
                closesocket \
                siginterrupt \
                sigaction \
                signal \
                getpass_r \
                strlcat \
                getpwuid \
                geteuid \
                dlopen \
                utime \
                sigsetjmp \
		memmove \
		bcopy \
		strerror \
                poll,
dnl if found
[],
dnl if not found, $ac_func is the name we check for
  func="$ac_func"
  AC_MSG_CHECKING([deeper for $func])
  AC_TRY_LINK( [],
               [ $func ();],
               AC_MSG_RESULT(yes!)
               eval "ac_cv_func_$func=yes"
               def=`echo "HAVE_$func" | tr 'a-z' 'A-Z'`
               AC_DEFINE_UNQUOTED($def, 1, [If you have $func]),
               AC_MSG_RESULT(but still no)
               )

)
ADNS_C_GCCATTRIB



# Checks for library functions.
AC_REPLACE_FNMATCH
AC_FUNC_FORK
AC_PROG_GCC_TRADITIONAL
AC_FUNC_SELECT_ARGTYPES
AC_TYPE_SIGNAL
AC_FUNC_STAT
AC_FUNC_STRFTIME
AC_FUNC_STRNLEN
AC_FUNC_STRTOD
AC_FUNC_VPRINTF
AC_CHECK_FUNCS(strnlen strlcpy strlcat strndup)
CURL_CHECK_NONBLOCKING_SOCKET
AC_DEFINE(DISABLED_THREADSAFE, 1, Set to explicitly specify we don't want to use thread-safe functions in curl)

dnl backtrace is used for segv reporting
AC_CHECK_FUNC(backtrace, 
[AC_DEFINE(HAVE_BACKTRACE, 1, 'backtrace function available')
LIBS="-g $LIBS"]
)

dnl gethostbyname in the nsl lib?
AC_CHECK_FUNC(gethostbyname, , [ AC_CHECK_LIB(nsl, gethostbyname) ])

if test "$ac_cv_lib_nsl_gethostbyname" != "yes" -a "$ac_cv_func_gethostbyname" != "yes"; then
  dnl gethostbyname in the socket lib?
  AC_CHECK_FUNC(gethostbyname, , [ AC_CHECK_LIB(socket, gethostbyname) ])
fi

dnl At least one system has been identified to require BOTH nsl and
dnl socket libs to link properly.
if test "$ac_cv_lib_nsl_gethostbyname" != "yes" -a "$ac_cv_lib_socket_gethostbyname" != "yes" -a "$ac_cv_func_gethostbyname" != "yes"; then
  AC_MSG_CHECKING([trying both nsl and socket libs])
  my_ac_save_LIBS=$LIBS
  LIBS="-lnsl -lsocket $LIBS"
  AC_TRY_LINK( ,
             [gethostbyname();],
             my_ac_link_result=success,
             my_ac_link_result=failure )

  if test "$my_ac_link_result" = "failure"; then
    AC_MSG_RESULT([no])
    AC_MSG_ERROR([couldn't find libraries for gethostbyname()])
    dnl restore LIBS
    LIBS=$my_ac_save_LIBS
  else
    AC_MSG_RESULT([yes])
  fi
fi

dnl resolve lib?
AC_CHECK_FUNC(strcasecmp, , [ AC_CHECK_LIB(resolve, strcasecmp) ])

if test "$ac_cv_lib_resolve_strcasecmp" = "$ac_cv_func_strcasecmp"; then
  AC_CHECK_LIB(resolve, strcasecmp,
              [LIBS="-lresolve $LIBS"],
               ,
               -lnsl)
fi

dnl socket lib?
AC_CHECK_FUNC(connect, , [ AC_CHECK_LIB(socket, connect) ])

AC_MSG_CHECKING([if argv can be written to])
AC_CACHE_VAL(curl_cv_writable_argv, [
AC_RUN_IFELSE([[
int main(int argc, char ** argv) {
	argv[0][0] = ' ';
	return (argv[0][0] == ' ')?0:1;
}
	]],
	curl_cv_writable_argv=yes,
	curl_cv_writable_argv=no,
	curl_cv_writable_argv=cross)
])
case $curl_cv_writable_argv in
yes)
	AC_DEFINE(HAVE_WRITABLE_ARGV, 1, [Define this symbol if your OS supports changing the contents of argv])
	AC_MSG_RESULT(yes)
	;;
no)
	AC_MSG_RESULT(no)
	;;
*)
        AC_MSG_RESULT(no)
        AC_MSG_WARN([the previous check could not be made default was used])
	;;
esac



dnl **** Check for underscore on external symbols ****

AC_CACHE_CHECK(whether external symbols need an underscore prefix,
               ac_cv_c_extern_prefix,
[saved_libs=$LIBS
LIBS="conftest_asm.s $LIBS"
cat > conftest_asm.s <<EOF
	.globl _ac_test
_ac_test:
	.long 0
EOF
AC_TRY_LINK([extern int ac_test;],[if (ac_test) return 1],
            ac_cv_c_extern_prefix="yes",ac_cv_c_extern_prefix="no")
LIBS=$saved_libs])
if test "$ac_cv_c_extern_prefix" = "yes"
then
  AC_DEFINE(NEED_UNDERSCORE_PREFIX, 1, "Our Platfrom requires Underscores")
fi

dnl check for berkeley db support
AC_CHECK_HEADER(db.h, AC_DEFINE(HAVE_DB_H, 1, [Define to 1 if you have the <db.h> header file.])
				AC_CHECK_LIB(db, db_create, LIBDB="-ldb"))


AC_MSG_CHECKING([if we need -no-undefined])
case $host in
  *-*-cygwin | *-*-mingw* | *-*-pw32*)
    need_no_undefined=yes
    ;;
  *)
    need_no_undefined=no
    ;;
esac
AC_MSG_RESULT($need_no_undefined)
dnl AM_CONDITIONAL(NO_UNDEFINED, test x$need_no_undefined = xyes)

AC_MSG_CHECKING([if we need -mimpure-text])
case $host in
  *-*-solaris2*)
    if test "$GCC" = "yes"; then
      mimpure="yes"
    fi
    ;;
  *)
    mimpure=no
    ;;
esac
AC_MSG_RESULT($mimpure)
dnl AM_CONDITIONAL(MIMPURE, test x$mimpure = xyes)


dnl AC_CONFIG_SUBDIRS(src/libltdl)



do_extauth=no
do_ircdauth=no
PROTOCOL=no
AUTH=no

dnl check IRCD support first to save time
dnl check to see if we should enable Unreal IRCD Support
AC_MSG_CHECKING(Whether to Enable Unreal 3.1.x IRCD Support...)
AC_ARG_ENABLE(unreal31, [  --enable-unreal31 - enable Unreal 3.1.x IRCD Support],
[ case "$enableval" in
  yes)  
	AC_DEFINE(UNREAL, 1, 'Enable Unreal 3.1.x Support')
    	AC_DEFINE_UNQUOTED(NS_PROTOCOL, "Unreal 3.1", "IRCd Protocol we are compiled with")
	PROTOCOL="unreal"
	AC_MSG_RESULT(yes)
	;;
  *)
	AC_MSG_RESULT(no)
	;;
esac],
AC_MSG_RESULT(no))
AC_MSG_CHECKING(Whether to Enable Unreal 3.2.x IRCD Support...)
AC_ARG_ENABLE(unreal32, [  --enable-unreal32 - enable Unreal 3.2.x IRCD Support],
[ case "$enableval" in
  yes)  
	AC_DEFINE(UNREAL, 1, 'Enable Unreal 3.1.x Support')
	AC_DEFINE(UNREAL32, 1, 'Enable Unreal 3.2.x Support')
    	AC_DEFINE_UNQUOTED(NS_PROTOCOL, "Unreal 3.2", "IRCd Protocol we are compiled with")
	PROTOCOL="unreal"
	AC_MSG_RESULT(yes)
	;;
  *)
	AC_MSG_RESULT(no)
	;;
esac],
AC_MSG_RESULT(no))

dnl check to see if we should enable Ultimate IRCD Support
AC_MSG_CHECKING(Whether to Enable Ultimate 2.x.x IRCD Support...)
AC_ARG_ENABLE(ultimate2, [  --enable-ultimate2 - enable Ultimate 2.x.x IRCD Support],
[ case "$enableval" in
  yes)  
	AC_DEFINE(ULTIMATE, 1, 'Enable Ultimate Support')
    	AC_DEFINE_UNQUOTED(NS_PROTOCOL, "Ultimate 2.x.x")
	PROTOCOL="ultimate"
	AC_MSG_RESULT(yes)
	;;
  *)
	AC_MSG_RESULT(no)
	;;
esac],
AC_MSG_RESULT(no)
)
AC_MSG_CHECKING(Whether to Enable Ultimate 3.x.x IRCD Support...)
AC_ARG_ENABLE(ultimate3, [  --enable-ultimate3 - enable Ultimate 3.x.x IRCD Support],
[ case "$enableval" in
  yes)  
	AC_DEFINE(ULTIMATE, 1, 'Enable Ultimate 2.x.x Support')
	AC_DEFINE(ULTIMATE3, 1, "Enable Ultimate 3.x.x Support')
    	AC_DEFINE_UNQUOTED(NS_PROTOCOL, "Ultimate 3.x.x")
	PROTOCOL="ultimate"
	AC_MSG_RESULT(yes)
	;;
  *)
	AC_MSG_RESULT(no)
	;;
esac],
AC_MSG_RESULT(no)
)

AC_MSG_CHECKING(Whether to Enable Hybrid 7.x.x IRCD Support...)
AC_ARG_ENABLE(hybrid7, [  --enable-hybrid7 - enable Hybrid7 IRCD Support],
[ case "$enableval" in
  yes)  
	AC_DEFINE(HYBRID7, 1, 'Enable hybrid7 IRCD support')
    	AC_DEFINE_UNQUOTED(NS_PROTOCOL, "Hybrid 7")
	PROTOCOL="hybrid7"
	AC_MSG_CHECKING(Auto-Enabling ServiceRoots Authentication Module)
	do_extauth=yes
	MODULES="$MODULES extauth"
	AC_MSG_RESULT(yes)
	;;
  *)
	AC_MSG_RESULT(no)
	;;
esac],
AC_MSG_RESULT(no)
)

AC_MSG_CHECKING(Whether to Enable NeoIRCd IRCD Support...)
AC_ARG_ENABLE(neoircd, [  --enable-neoircd - enable NeoIRCd IRCD Support],
[ case "$enableval" in
  yes)  
	AC_DEFINE(NEOIRCD, 1, 'Enable NeoIRCd IRCD support')
    	AC_DEFINE_UNQUOTED(NS_PROTOCOL, "NeoIRCd")
	PROTOCOL="neoircd"
	AC_MSG_RESULT(yes)
	;;
  *)
	AC_MSG_RESULT(no)
	;;
esac],
AC_MSG_RESULT(no)
)

dnl check to see if we should enable Quantum IRCD Support
AC_MSG_CHECKING(Whether to Enable Quantum IRCD Support...)
AC_ARG_ENABLE(quantum, [  --enable-quantum - enable Quantum IRCD Support],
[ case "$enableval" in
  yes)  
	AC_DEFINE(QUANTUM, 1, 'Enable Quantum Support')
    	AC_DEFINE_UNQUOTED(NS_PROTOCOL, "Quantum")
	PROTOCOL="quantum"
	AC_MSG_RESULT(yes)
	;;
  *)
	AC_MSG_RESULT(no)
	;;
esac],
AC_MSG_RESULT(no))

dnl check to see if we should enable Mystic IRCD Support
AC_MSG_CHECKING(Whether to Enable Mystic IRCD Support...)
AC_ARG_ENABLE(mystic, [  --enable-mystic - enable Mystic IRCD Support],
[ case "$enableval" in
  yes)  
	AC_DEFINE(MYSTIC, 1, 'Enable Mystic Support')
    	AC_DEFINE_UNQUOTED(NS_PROTOCOL, "Mystic")
	PROTOCOL="mystic"
	AC_MSG_RESULT(yes)
	;;
  *)
	AC_MSG_RESULT(no)
	;;
esac],
AC_MSG_RESULT(no))

dnl check to see if we should enable Bahamut IRCD Support
AC_MSG_CHECKING(Whether to Enable Bahamut IRCD Support...)
AC_ARG_ENABLE(bahamut, [  --enable-bahamut - enable Bahamut IRCD Support],
[ case "$enableval" in
  yes)  
	AC_DEFINE(BAHAMUT, 1, 'Enable Bahamut Support')
    	AC_DEFINE_UNQUOTED(NS_PROTOCOL, "Bahamut")
	PROTOCOL="bahamut"
	AC_MSG_RESULT(yes)
	;;
  *)
	AC_MSG_RESULT(no)
	;;
esac],
AC_MSG_RESULT(no))

dnl check to see if we should enable IRCu IRCD Support
AC_MSG_CHECKING(Whether to Enable IRCu IRCD Support...)
AC_ARG_ENABLE(ircu, [  --enable-ircu - enable IRCu IRCD Support],
[ case "$enableval" in
  yes)  
dnl	AC_MSG_ERROR('Sorry IRCu support isnt complete yet')
	AC_DEFINE(IRCU, 1, 'Enable IRCu Support')
    	AC_DEFINE_UNQUOTED(NS_PROTOCOL, "IRCu")
	PROTOCOL="ircu"
	AC_MSG_RESULT(yes)
	;;
  *)
	AC_MSG_RESULT(no)
	;;
esac],
AC_MSG_RESULT(no))

dnl check to see if we should enable liquid IRCD Support
AC_MSG_CHECKING(Whether to Enable Liquid IRCD Support...)
AC_ARG_ENABLE(liquid, [  --enable-liquid - enable Liquid IRCD Support],
[ case "$enableval" in
  yes)  
	AC_DEFINE(LIQUID, 1, 'Enable Liquid IRCd Support')
    	AC_DEFINE_UNQUOTED(NS_PROTOCOL, "Liquid")
	PROTOCOL="liquid"
	AC_MSG_RESULT(yes)
	;;
  *)
	AC_MSG_RESULT(no)
	;;
esac],
AC_MSG_RESULT(no)
)

dnl check to see if we should enable Viagra IRCD Support
AC_MSG_CHECKING(Whether to Enable Viagra IRCD Support...)
AC_ARG_ENABLE(viagra, [  --enable-viagra - enable Viagra IRCD Support],
[ case "$enableval" in
  yes)  
	AC_DEFINE(VIAGRA, 1, 'Enable Viagra IRCd Support')
    	AC_DEFINE_UNQUOTED(NS_PROTOCOL, "Viagra")
	PROTOCOL="viagra"
	AC_MSG_RESULT(yes)
	;;
  *)
	AC_MSG_RESULT(no)
	;;
esac],
AC_MSG_RESULT(no)
)

AC_MSG_CHECKING(A compatible IRCD is specified)
if test "$PROTOCOL" = no; then
	AC_MSG_RESULT(no)
	AC_MSG_ERROR('You must define a IRCD to use. See ./configure --help for more information')
else
	AC_MSG_RESULT(yes)
fi

dnl check whether to enable IRCd user mode authentication
AC_MSG_CHECKING(Whether to enable IRCd user mode authentication...)
AC_ARG_ENABLE(ircdauth, [  --enable-ircdauth - IRCd user mode authentication],
[ case "$enableval" in
yes)
	MODULES="$MODULES ircdauth"
	AUTH=yes
	AC_MSG_RESULT(yes)
	;;
*)
	AC_MSG_RESULT(no)
	;;
esac],
AC_MSG_RESULT(no)
)

dnl check whether to enable nick!user@host authentication
if test "$do_extauth" = no; then
	AC_MSG_CHECKING(Whether to enable nick!user@host authentication...)
	AC_ARG_ENABLE(extauth, [  --enable-extauth - whether to enable nick!user@host authentication],
	[ case "$enableval" in
	yes)
		MODULES="$MODULES extauth"
		AUTH=yes
		AC_MSG_RESULT(yes)
		;;
	*)
		AC_MSG_RESULT(no)
		;;
	esac],
	AC_MSG_RESULT(no)
	)
fi
dnl check if we are running with Debug....
AC_MSG_CHECKING(Whether to Enable Debuging...)
AC_ARG_ENABLE(debug,
[  --enable-debug - Enable Debuging],
[ case "$enableval" in
  yes)
	AC_DEFINE(DEBUG, 1, 'Enable Debugging')
	CFLAGS="$CFLAGS -ggdb -Wall -DCURLDEBUG"
	AC_MSG_RESULT(yes - Watch your Log Files)
	;;
  *)
	CFLAGS="$CFLAGS -DNDEBUG"
	AC_MSG_RESULT(no)
	;;
  esac],
CFLAGS="$CFLAGS -DNDEBUG"
AC_MSG_RESULT(no)
)

AC_MSG_CHECKING(To Enable AutoTools Debug Mode?)
AC_ARG_ENABLE(autodebug, [  --enable-autodebug - Enable AutoTools Debug],
[ case "$enableval" in
  yes)
	AC_MSG_RESULT(yes)
	;;
  *)
	AC_MSG_RESULT(no)
	AX_MAINTAINER_MODE_AUTO_SILENT
	;;
esac],
AC_MSG_RESULT(no)
AX_MAINTAINER_MODE_AUTO_SILENT
)
	

AC_MSG_CHECKING(To Enable Raw command?)
AC_ARG_ENABLE(raw, [  --enable-raw - Enable Raw command],
[ case "$enableval" in
  yes)
	AC_DEFINE(USE_RAW, 1, 'Use Raw command')
	AC_MSG_RESULT(yes)
	;;
  *)
	AC_MSG_RESULT(no)
	;;
esac],
AC_MSG_RESULT(no)
)


AC_MSG_CHECKING(To Enable Sql Server Emulation?)
AC_ARG_ENABLE(sqlsrv, [  --enable-sqlsrv - Enable Sql Server Emulation],
[ case "$enableval" in
  yes)
	AC_DEFINE(SQLSRV, 1, 'Use Sql Server Emulation')
	AC_MSG_RESULT(yes)
	sqlsrvbuild=sqlsrv/librtadb.a
	AC_SUBST(sqlsrvbuild)
	buildsqlsrv=sqlsrvlib
	AC_SUBST(buildsqlsrv)
	;;
  *)
	AC_MSG_RESULT(no)
	;;
esac],
AC_MSG_RESULT(no)
)

AC_MSG_CHECKING(The Modules that will be automatically compiled)
AC_MSG_RESULT($MODULES)

AC_MSG_CHECKING(The additionall modules to compile?)
AC_ARG_WITH(modules, [  --with-modules - Additional Modules to compile],
MODULES="$MODULES $withval"
AC_MSG_RESULT($withval),
AC_MSG_RESULT("None"))


dnl Set NEO_PREFIX in config.h.
if test "x${prefix}" = "xNONE"; then
   AC_DEFINE_UNQUOTED(NEO_PREFIX, "${ac_default_prefix}", "Installation Prefix")
else
  AC_DEFINE_UNQUOTED(NEO_PREFIX, "${prefix}", "Installation Prefix")
fi


dnl PCRE options
NPCRE_MAJOR_VERSION=4
NPCRE_MINOR_VERSION=3
NPCRE_VERSION=$PCRE_MAJOR_VERSION.$PCRE_MINOR_VERSION

AC_DEFINE(LINK_SIZE, 2, "PCRE Lnk size")
AC_DEFINE(POSIX_MALLOC_THRESHOLD, 5, "Malloc Threshold")
AC_DEFINE(MATCH_LIMIT, 10000000, "PCRE Match limit")

AC_DEFINE(PCRE_MAJOR_VERSION, $NPCRE_MAJOR_VERSION, "PCRE Version")
AC_DEFINE(PCRE_MINOR_VERSION, NPCRE_MINOR_VERSION, "PCRE Version")
AC_DEFINE(PCRE_VERSION, NPCRE_VERSION, "Pcre full version")

AC_DEFINE_UNQUOTED(NS_HOST, "$host_os", "Operating System Host")

AC_SUBST(build_configtool)
AC_SUBST(PROTOCOL)
AC_SUBST(SED)
AC_SUBST(INCLTDL)
AC_SUBST(LIBLTDL)
AC_SUBST(LIBTOOL_DEPS)
AC_SUBST(MODULES)

AC_CONFIG_FILES([Makefile include/Makefile src/Makefile
		src/protocol/Makefile src/curl/Makefile
		src/keeper/Makefile src/adns/Makefile
		src/pcre/Makefile src/libltdl/Makefile
		src/modules/Makefile src/modules/connectserv/Makefile
		src/modules/extauth/Makefile
		src/modules/hostserv/Makefile
		src/modules/ircdauth/Makefile
		src/modules/loveserv/Makefile
		src/modules/moraleserv/Makefile
		src/modules/statserv/Makefile
		src/modules/template/Makefile
		src/modules/templateauth/Makefile])

AC_CACHE_SAVE
AC_OUTPUT
